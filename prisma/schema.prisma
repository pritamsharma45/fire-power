generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  // Relationships
  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
  likes         Like[]
  orders        Order[]
  profile       Profile?
  cartItems     CartItem[]
  cart          Cart?
  subscriber    Subscriber?
}

model Subscriber {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  userId    String   @unique
}

model Profile {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String   @unique
  dob_day   Int
  dob_month Int
  address   String
  street    String
  city      String
  zip       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relationships
  User      User?    @relation(fields: [userId], references: [id])
  userId    String   @unique
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Product model
model Product {
  id                Int                 @id @default(autoincrement())
  title             String
  description       String
  image             String?
  price             Float
  rank              Int                 @default(2000)
  stockQuantity     Int
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  // Relationships
  comments          Comment[]
  likes             Like[]
  orders            OrderItem[]
  inventory         Inventory[]
  cartItems         CartItem[]
  PromoProducts     PromoProducts[]
  WholesaleProducts WholesaleProducts[]
}

model PromoProducts {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relationships
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
}

model WholesaleProducts {
  id        Int      @id @default(autoincrement())
  minQty    Int      @default(10)
  discount  Float    @default(0.04)
  createdAt DateTime @default(now())
  // Relationships
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
}

// Comment model
model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relationships
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  productId Int
  userId    String
}

model CartItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relationships
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@unique([productId, userId])
}

model Cart {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relationships
  items     Json
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}

// Like model
model Like {
  id        Int      @id @default(autoincrement())
  hasLiked  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relationships
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  productId Int
  userId    String

  @@unique([productId, userId])
}

// Order model
model Order {
  id              Int                  @id @default(autoincrement())
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  sessionId       String?
  status          OrderStatus          @default(PENDING)
  deliveryStatus  DeliveryStatus?      @default(PENDING)
  // Relationships
  items           OrderItem[]
  user            User                 @relation(fields: [userId], references: [id])
  transactions    PaymentTransaction[]
  userId          String
  ShippingAddress ShippingAddress[]
}

// OrderItem model
model OrderItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
  orderId   Int
  productId Int
}

// Shipping Address from Stripe
model ShippingAddress {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  name        String
  line1       String
  line2       String
  city        String
  state       String
  country     String
  postal_code String
  // Relationships
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     Int
}

// PaymentTransaction model
model PaymentTransaction {
  id        Int      @id @default(autoincrement())
  amount    Float
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relationships
  order     Order    @relation(fields: [orderId], references: [id])
  userId    String
  orderId   Int
  // payment_intent_id String  @unique
}

// Inventory model
model Inventory {
  id        Int      @id @default(autoincrement())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relationships
  product   Product  @relation(fields: [productId], references: [id])
  location  String
  productId Int
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

enum DeliveryStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
}
