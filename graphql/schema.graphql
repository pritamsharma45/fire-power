### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Cart {
  createdAt: String
  id: Int
  items: Json
  updatedAt: String
  user: User
  userId: String
}

type Comment {
  content: String
  createdAt: String
  id: Int
  product: Product
  productId: Int
  updatedAt: String
  user: User
  userId: String
}

type Edge {
  cursor: Int!
  node: Product!
}

"""
The `Json` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

type Like {
  createdAt: String
  hasLiked: Boolean
  id: Int
  product: Product
  productId: Int
  updatedAt: String
  user: User
  userId: String
}

type Mutation {
  addComment(content: String!, productId: Int!, userId: String!): Comment!
  addItemToCart(productId: Int!, quantity: Int!, userId: String!): Cart!
  addItemsToCart(items: Json!, userId: String!): Cart!
  addOrUpdateLike(hasLiked: Boolean!, productId: Int!, userId: String!): Like!
  addProfile(address: String!, city: String!, firstName: String!, lastName: String!, street: String!, zip: String!): Profile!
  createOrder(items: [OrderItemInput!]!, payment: PaymentTransactionInput!, total: Float!, userId: String!): Order
  createProduct(description: String!, image: String!, price: Float!, stockQuantity: Int!, title: String!): Product!
  deleteProduct(id: Int!): Product!
  updateProduct(description: String, id: Int, image: String, price: Float, stockQuantity: Int, title: String): Product!
}

type Order {
  createdAt: String
  id: Int
  items: OrderItem
  total: Float
  transactions: PaymentTransaction
  updatedAt: String
  user: User
}

type OrderItem {
  createdAt: String
  id: Int
  order: Order
  price: Float
  product: Product
  quantity: Int
  updatedAt: String
}

input OrderItemInput {
  price: Float!
  productId: Int!
  quantity: Int!
}

type PageInfo {
  endCursor: Int!
  hasNextPage: Boolean!
}

type PaymentTransaction {
  amount: Float
  createdAt: String
  id: Int
  order: Order
  orderId: Int
  payment_intent_id: String
  status: String
  updatedAt: String
  userId: Int
}

input PaymentTransactionInput {
  amount: Float!
  status: String!
}

type Product {
  description: String
  id: Int
  image: String
  likes: [Like]
  price: Float
  stockQuantity: Int
  title: String
}

type Profile {
  address: String
  city: String
  createdAt: String
  firstName: String
  id: String
  lastName: String
  street: String
  updatedAt: String
  zip: String
}

type Query {
  cartByUserId(userId: String!): Cart!
  commentsByProductId(productId: Int!): [Comment]!
  getProfileByEmail(userId: String!): Profile!
  likeByProductId(productId: Int!, userId: String!): [Like]!
  orderItems(userId: String!): [OrderItem]
  product(id: Int!): Product!
  products(after: Int, first: Int): Response
  userWithEmail(email: String!): User!
}

type Response {
  edges: [Edge]!
  pageInfo: PageInfo!
}

type User {
  comments: Comment
  createdAt: String
  email: String
  id: String
  likes: Like
  name: String
  orders: Order
  password: String
  updatedAt: String
}
